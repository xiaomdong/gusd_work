# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

#from bank import bank_pb2 as bank__pb2
import bank_pb2 as bank__pb2


class bankStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.deposit = channel.unary_unary(
        '/bank.bank/deposit',
        request_serializer=bank__pb2.depositRequest.SerializeToString,
        response_deserializer=bank__pb2.depositReply.FromString,
        )
    self.withdrawal = channel.unary_unary(
        '/bank.bank/withdrawal',
        request_serializer=bank__pb2.withdrawalRequest.SerializeToString,
        response_deserializer=bank__pb2.withdrawalReply.FromString,
        )
    self.balance = channel.unary_unary(
        '/bank.bank/balance',
        request_serializer=bank__pb2.balanceRequest.SerializeToString,
        response_deserializer=bank__pb2.balanceReply.FromString,
        )
    self.transfer = channel.unary_unary(
        '/bank.bank/transfer',
        request_serializer=bank__pb2.transferRequest.SerializeToString,
        response_deserializer=bank__pb2.transferReply.FromString,
        )
    self.getRecord = channel.unary_stream(
        '/bank.bank/getRecord',
        request_serializer=bank__pb2.getRecordRequest.SerializeToString,
        response_deserializer=bank__pb2.getRecordReply.FromString,
        )


class bankServicer(object):
  """The greeting service definition.
  """

  def deposit(self, request, context):
    """Sends a deposit
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def withdrawal(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def balance(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def transfer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getRecord(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_bankServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'deposit': grpc.unary_unary_rpc_method_handler(
          servicer.deposit,
          request_deserializer=bank__pb2.depositRequest.FromString,
          response_serializer=bank__pb2.depositReply.SerializeToString,
      ),
      'withdrawal': grpc.unary_unary_rpc_method_handler(
          servicer.withdrawal,
          request_deserializer=bank__pb2.withdrawalRequest.FromString,
          response_serializer=bank__pb2.withdrawalReply.SerializeToString,
      ),
      'balance': grpc.unary_unary_rpc_method_handler(
          servicer.balance,
          request_deserializer=bank__pb2.balanceRequest.FromString,
          response_serializer=bank__pb2.balanceReply.SerializeToString,
      ),
      'transfer': grpc.unary_unary_rpc_method_handler(
          servicer.transfer,
          request_deserializer=bank__pb2.transferRequest.FromString,
          response_serializer=bank__pb2.transferReply.SerializeToString,
      ),
      'getRecord': grpc.unary_stream_rpc_method_handler(
          servicer.getRecord,
          request_deserializer=bank__pb2.getRecordRequest.FromString,
          response_serializer=bank__pb2.getRecordReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bank.bank', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
